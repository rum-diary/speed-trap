{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"AAAA;;6DAE6D;AAC7D,YAAY,CAAC;;AAEb,iCAA0B;AAC1B,2DAAmD;AACnD,qCAA8B;AAC9B,qCAA8B;AAE9B,MAAqB,SAAS;IAS5B,YAAa,UAAqE,EAAE;QAClF,IAAI,CAAC,gBAAgB,GAAG,IAAI,2BAAgB,CAAC,OAAO,CAAC,CAAC;QAEtD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;QAE1E,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAM,CAAC;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAM,CAAC;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,GAAG,cAAI,EAAE,CAAC;QAEnB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;QAE/B,sEAAsE;QACtE,mEAAmE;QACnE,iEAAiE;QACjE,6CAA6C;QAC7C,IAAI;YACF,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/C,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SAClC;QAAC,OAAM,CAAC,EAAE;YACT,6DAA6D;SAC9D;IACH,CAAC;IAED;;QAEI;IACJ,OAAO;QACL,8DAA8D;QAC9D,iEAAiE;QACjE,+DAA+D;QAC/D,IAAI,gBAAgB,CAAC;QACrB,IAAI;YACF,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpD,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SACrC;QAAC,OAAM,CAAC,EAAE;YACT,+DAA+D;SAChE;QAED,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,gBAAgB;YACvB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAC9C,QAAQ,EAAE,QAAQ,CAAC,QAAQ,IAAI,EAAE;YACjC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE;gBACN,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK;gBAC1B,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;aAC7B;SACF,CAAC;IACJ,CAAC;IAED;;QAEI;IACJ,SAAS;QACP,8DAA8D;QAC9D,iEAAiE;QACjE,+DAA+D;QAC/D,IAAI;YACF,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7C;QAAC,OAAM,CAAC,EAAE;YACT,+DAA+D;SAChE;QAED,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;YACpC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACzB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;SAC1B,CAAC;IACJ,CAAC;CACF;AAvFD,4BAuFC;AAAA,CAAC","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n* License, v. 2.0. If a copy of the MPL was not distributed with this\n* file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n'use strict';\n\nimport guid from './guid';\nimport NavigationTiming from './navigation-timing';\nimport Timers from './timers';\nimport Events from './events';\n\nexport default class SpeedTrap {\n  navigationTiming: NavigationTiming;\n  baseTime: number;\n  timers: Timers;\n  events: Events;\n  uuid: string;\n  tags: string[];\n  returning?: boolean;\n\n  constructor (options: { tags?: string[], navigationTiming?: PerformanceTiming } = {}) {\n    this.navigationTiming = new NavigationTiming(options);\n\n    this.baseTime = this.navigationTiming.get().navigationStart || Date.now();\n\n    this.timers = new Timers({\n      baseTime: this.baseTime\n    });\n\n    this.events = new Events({\n      baseTime: this.baseTime\n    });\n\n    this.uuid = guid();\n\n    this.tags = options.tags || [];\n\n    // store a bit with the site being tracked to avoid sending cookies to\n    // rum-diary.org. This bit keeps track whether the user has visited\n    // this site before. Since localStorage is scoped to a particular\n    // domain, it is not shared with other sites.\n    try {\n      this.returning = !!localStorage.getItem('_st');\n      localStorage.setItem('_st', '1');\n    } catch(e) {\n      // if cookies are disabled, localStorage access will blow up.\n    }\n  }\n\n  /**\n    * Data to send on page load.\n    */\n  getLoad () {\n    // puuid is saved for users who visit another page on the same\n    // site. The current page will be updated to set its is_exit flag\n    // to false as well as update which page the user goes to next.\n    var previousPageUUID;\n    try {\n      previousPageUUID = sessionStorage.getItem('_puuid');\n      sessionStorage.removeItem('_puuid');\n    } catch(e) {\n      // if cookies are disabled, sessionStorage access will blow up.\n    }\n\n    return {\n      uuid: this.uuid,\n      puuid: previousPageUUID,\n      navigationTiming: this.navigationTiming.diff(),\n      referrer: document.referrer || '',\n      tags: this.tags,\n      returning: this.returning,\n      screen: {\n        width: window.screen.width,\n        height: window.screen.height\n      }\n    };\n  }\n\n  /**\n    * Data to send on page unload\n    */\n  getUnload () {\n    // puuid is saved for users who visit another page on the same\n    // site. The current page will be updated to set its is_exit flag\n    // to false as well as update which page the user goes to next.\n    try {\n      sessionStorage.setItem('_puuid', this.uuid);\n    } catch(e) {\n      // if cookies are disabled, sessionStorage access will blow up.\n    }\n\n    return {\n      uuid: this.uuid,\n      duration: Date.now() - this.baseTime,\n      timers: this.timers.get(),\n      events: this.events.get()\n    };\n  }\n};\n"]}